"""
DevOps Automation Agent - Meta WhatsApp Business API Setup
Automates Meta API setup, Google/Outlook OAuth, and credential management
"""

import asyncio
import json
import os
import re
import logging
from playwright.async_api import async_playwright, Page, Browser
from typing import Dict, List, Optional
from dataclasses import dataclass, asdict
from datetime import datetime
import hashlib
import subprocess

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('agent.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class Credential:
    """Stores a service credential"""
    service: str
    key_name: str
    value: str
    extracted_at: str
    notes: Optional[str] = None

class CredentialVault:
    """Secure storage for extracted credentials"""
    def __init__(self, vault_path: str = "credentials.json"):
        self.vault_path = vault_path
        self.credentials: List[Credential] = []
        self.load()
    
    def add(self, service: str, key_name: str, value: str, notes: str = None):
        cred = Credential(
            service=service,
            key_name=key_name,
            value=value,
            extracted_at=datetime.now().isoformat(),
            notes=notes
        )
        # Update if exists
        self.credentials = [c for c in self.credentials 
                          if not (c.service == service and c.key_name == key_name)]
        self.credentials.append(cred)
        self.save()
        logger.info(f"✅ Saved: {service}.{key_name}")
    
    def save(self):
        try:
            with open(self.vault_path, 'w') as f:
                json.dump([asdict(c) for c in self.credentials], f, indent=2)
        except Exception as e:
            logger.error(f"Failed to save vault: {e}")
    
    def load(self):
        if os.path.exists(self.vault_path):
            try:
                with open(self.vault_path, 'r') as f:
                    data = json.load(f)
                    self.credentials = [Credential(**c) for c in data]
                    logger.info(f"Loaded {len(self.credentials)} credentials")
            except Exception as e:
                logger.error(f"Failed to load vault: {e}")
    
    def get_env_format(self) -> str:
        """Export as .env format"""
        lines = ["# Generated by DevOps Agent", f"# {datetime.now().isoformat()}", ""]
        for cred in self.credentials:
            key = f"{cred.service.upper()}_{cred.key_name.upper()}"
            lines.append(f"{key}={cred.value}")
        return "\n".join(lines)
    
    def get_render_format(self) -> List[Dict]:
        """Export for Render API"""
        return [
            {
                "key": f"{c.service.upper()}_{c.key_name.upper()}",
                "value": c.value
            }
            for c in self.credentials
        ]

class AutomationAgent:
    """Main automation agent"""
    def __init__(self, headless: bool = False):
        self.headless = headless
        self.vault = CredentialVault()
        self.browser: Optional[Browser] = None
        self.context = None
        self.playwright = None
    
    async def start(self):
        """Initialize browser"""
        try:
            self.playwright = await async_playwright().start()
            self.browser = await self.playwright.chromium.launch(
                headless=self.headless,
                args=['--start-maximized']
            )
            self.context = await self.browser.new_context(
                viewport={'width': 1920, 'height': 1080},
                user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            )
            logger.info("🚀 Browser started")
        except Exception as e:
            logger.error(f"Failed to start browser: {e}")
            raise
    
    async def stop(self):
        """Cleanup"""
        try:
            if self.browser:
                await self.browser.close()
            if self.playwright:
                await self.playwright.stop()
            logger.info("👋 Browser closed")
        except Exception as e:
            logger.error(f"Error during cleanup: {e}")
    
    async def setup_meta_whatsapp(self, facebook_email: str, facebook_password: str):
        """
        Complete Meta WhatsApp Business API setup
        Extracts: Access Token, App Secret, Verify Token, Phone Number ID, Business Account ID
        """
        page = await self.context.new_page()
        
        try:
            logger.info("📱 Starting Meta WhatsApp Business API setup...")
            
            # Step 1: Login to Meta
            await page.goto("https://developers.facebook.com/")
            await asyncio.sleep(2)
            
            # Click login
            try:
                await page.click('a:has-text("Log In")', timeout=5000)
            except:
                logger.info("Already logged in or different layout")
            
            await asyncio.sleep(2)
            
            # Fill login form
            try:
                await page.fill('input[name="email"]', facebook_email, timeout=10000)
                await page.fill('input[name="pass"]', facebook_password)
                await page.click('button[name="login"]')
                logger.info("🔐 Logging in...")
                await asyncio.sleep(5)
            except Exception as e:
                logger.warning(f"Login step variation: {e}")
            
            # Step 2: Navigate to Apps
            await page.goto("https://developers.facebook.com/apps/")
            await asyncio.sleep(3)
            
            logger.info("""
╔══════════════════════════════════════════════════════════════╗
║  META APP CREATION - I'll guide you through this             ║
╚══════════════════════════════════════════════════════════════╝

👀 I see the screen. Let me help you create a WhatsApp Business App.

STEP 1: Click 'Create App' button (usually green/blue)
""")
            
            input("Press Enter when you've clicked 'Create App'...")
            
            logger.info("""
STEP 2: Select 'Business' as app type
STEP 3: Fill in app details:
   - App Name: Choose something like 'MyBusiness WhatsApp'
   - App Contact Email: Your business email
   - Business Account: Select or create one
""")
            
            input("Press Enter when app is created...")
            
            # Wait for app dashboard
            await asyncio.sleep(3)
            current_url = page.url
            
            # Extract App ID from URL
            app_id_match = re.search(r'/apps/(\d+)', current_url)
            if app_id_match:
                app_id = app_id_match.group(1)
                self.vault.add("meta", "app_id", app_id, "WhatsApp Business App ID")
                logger.info(f"✅ App ID: {app_id}")
            
            # Step 3: Add WhatsApp Product
            logger.info("""
STEP 4: Add WhatsApp Product
   - Scroll down to find 'WhatsApp' product
   - Click 'Set Up' on WhatsApp
""")
            
            input("Press Enter when WhatsApp is added...")
            
            # Navigate to WhatsApp settings
            await page.goto(f"https://developers.facebook.com/apps/{app_id}/whatsapp-business/wa-settings/")
            await asyncio.sleep(3)
            
            # Step 4: Get Temporary Access Token
            logger.info("""
STEP 5: Generate Access Token
   - You should see 'Temporary access token' section
   - Copy the token that's displayed
""")
            
            try:
                # Try to extract access token automatically
                token_element = await page.locator('input[value*="EAA"], textarea:has-text("EAA")').first
                if token_element:
                    access_token = await token_element.input_value()
                    if access_token and len(access_token) > 50:
                        self.vault.add("meta", "access_token", access_token, 
                                     "Temporary access token - Generate permanent one later")
                        logger.info("✅ Access token extracted!")
            except:
                access_token = input("Paste the access token here: ").strip()
                if access_token:
                    self.vault.add("meta", "access_token", access_token)
            
            # Step 5: Get Phone Number ID
            try:
                # Look for phone number ID
                phone_numbers = await page.locator('text=/\d{15}|Phone Number ID/').all()
                if phone_numbers:
                    phone_id = await phone_numbers[0].text_content()
                    phone_id = re.search(r'\d{15}', phone_id)
                    if phone_id:
                        self.vault.add("meta", "phone_number_id", phone_id.group(0))
                        logger.info("✅ Phone Number ID extracted!")
            except:
                phone_id = input("Enter Phone Number ID (15 digits): ").strip()
                if phone_id:
                    self.vault.add("meta", "phone_number_id", phone_id)
            
            # Step 6: Get App Secret
            await page.goto(f"https://developers.facebook.com/apps/{app_id}/settings/basic/")
            await asyncio.sleep(2)
            
            logger.info("""
STEP 6: Get App Secret
   - You're now on Basic Settings page
   - Click 'Show' next to 'App Secret'
   - You may need to re-enter your password
""")
            
            try:
                # Click show button
                await page.click('button:has-text("Show")', timeout=5000)
                await asyncio.sleep(2)
                
                # May need password confirmation
                try:
                    await page.fill('input[type="password"]', facebook_password, timeout=5000)
                    await page.click('button[type="submit"]')
                    await asyncio.sleep(2)
                except:
                    pass
                
                # Extract app secret
                app_secret = await page.locator('input[value*=""]').first.input_value()
                if app_secret and len(app_secret) > 20:
                    self.vault.add("meta", "app_secret", app_secret)
                    logger.info("✅ App Secret extracted!")
            except:
                app_secret = input("Paste App Secret here: ").strip()
                if app_secret:
                    self.vault.add("meta", "app_secret", app_secret)
            
            # Step 7: Generate Verify Token
            verify_token = hashlib.sha256(f"{app_id}{datetime.now().isoformat()}".encode()).hexdigest()[:32]
            self.vault.add("meta", "verify_token", verify_token, 
                         "Use this for webhook verification")
            logger.info(f"✅ Generated verify token: {verify_token}")
            
            # Step 8: Setup webhook
            logger.info(f"""
╔══════════════════════════════════════════════════════════════╗
║  WEBHOOK SETUP                                                ║
╚══════════════════════════════════════════════════════════════╝

STEP 7: Configure Webhook (WhatsApp Configuration page)
   - Callback URL: https://your-domain.com/webhook
   - Verify Token: {verify_token}
   - Webhook Fields: Select 'messages'
   
⚠️  You'll need to deploy your app first to get the callback URL
""")
            
            # Port configuration
            self.vault.add("meta", "port", "3000", "Default port for webhook server")
            
            logger.info("""
✅ Meta WhatsApp API Setup Complete!

📋 WHAT YOU HAVE NOW:
   ✓ App ID
   ✓ App Secret  
   ✓ Access Token (temporary - generate permanent later)
   ✓ Verify Token
   ✓ Phone Number ID
   
📋 WHAT YOU NEED TO DO:
   1. Deploy your webhook server
   2. Add the webhook URL in Meta dashboard
   3. Generate permanent access token (temp expires in 24h)
   4. Add payment method for sending messages
   
💰 COSTS:
   - First 1,000 messages/month: FREE
   - After that: ~$0.005 - $0.09 per message (varies by country)
   - No monthly fees, pay-as-you-go
""")
            
        except Exception as e:
            logger.error(f"❌ Error during Meta setup: {e}", exc_info=True)
        finally:
            await page.close()
    
    async def setup_google_oauth(self, project_name: str):
        """Setup Google OAuth (Sign In with Google)"""
        page = await self.context.new_page()
        
        try:
            logger.info("🔐 Setting up Google OAuth...")
            
            await page.goto("https://console.cloud.google.com/")
            await asyncio.sleep(3)
            
            logger.info("""
╔══════════════════════════════════════════════════════════════╗
║  GOOGLE OAUTH SETUP                                           ║
╚══════════════════════════════════════════════════════════════╝

STEP 1: Create/Select Project
   - Click project dropdown (top left)
   - Click 'New Project'
   - Name: {project_name}
   - Click 'Create'
""")
            
            input("Press Enter when project is created...")
            
            logger.info("""
STEP 2: Enable Google+ API
   - Search for 'Google+ API' in search bar
   - Click 'Enable'
""")
            
            await page.goto("https://console.cloud.google.com/apis/credentials")
            await asyncio.sleep(2)
            
            logger.info("""
STEP 3: Configure OAuth Consent Screen
   - Click 'OAuth consent screen' tab
   - Select 'External'
   - Fill in:
     * App name: Your app name
     * User support email: Your email
     * Developer contact: Your email
   - Click 'Save and Continue'
   - Add scopes: email, profile, openid
   - Save
""")
            
            input("Press Enter when OAuth screen is configured...")
            
            logger.info("""
STEP 4: Create OAuth Client ID
   - Click 'Credentials' tab
   - Click 'Create Credentials' → 'OAuth client ID'
   - Application type: 'Web application'
   - Name: 'Web client 1'
   - Authorized redirect URIs:
     * http://localhost:3000/auth/google/callback
     * https://your-domain.com/auth/google/callback
   - Click 'Create'
""")
            
            input("Press Enter when credentials are created...")
            
            # Try to extract credentials
            try:
                client_id = await page.locator('text=Client ID').locator('..').locator('input').input_value()
                if client_id:
                    self.vault.add("google_oauth", "client_id", client_id)
                    logger.info("✅ Client ID extracted")
            except:
                pass
            
            try:
                client_secret = await page.locator('text=Client secret').locator('..').locator('input').input_value()
                if client_secret:
                    self.vault.add("google_oauth", "client_secret", client_secret)
                    logger.info("✅ Client Secret extracted")
            except:
                pass
            
            # Manual input fallback
            if not client_id:
                client_id = input("Paste Client ID: ").strip()
                if client_id:
                    self.vault.add("google_oauth", "client_id", client_id)
            
            if not client_secret:
                client_secret = input("Paste Client Secret: ").strip()
                if client_secret:
                    self.vault.add("google_oauth", "client_secret", client_secret)
            
            logger.info("✅ Google OAuth setup complete!")
            
        except Exception as e:
            logger.error(f"❌ Error: {e}", exc_info=True)
        finally:
            await page.close()
    
    async def setup_microsoft_oauth(self):
        """Setup Microsoft/Outlook OAuth"""
        page = await self.context.new_page()
        
        try:
            logger.info("🔐 Setting up Microsoft OAuth...")
            
            await page.goto("https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationsListBlade")
            await asyncio.sleep(3)
            
            logger.info("""
╔══════════════════════════════════════════════════════════════╗
║  MICROSOFT OAUTH SETUP                                        ║
╚══════════════════════════════════════════════════════════════╝

STEP 1: Register Application
   - Click 'New registration'
   - Name: Your app name
   - Supported account types: 'Accounts in any organizational directory and personal Microsoft accounts'
   - Redirect URI: 
     * Platform: Web
     * URI: http://localhost:3000/auth/microsoft/callback
   - Click 'Register'
""")
            
            input("Press Enter when app is registered...")
            
            # Extract Application (client) ID
            try:
                app_id = await page.locator('text=Application (client) ID').locator('..').locator('input').input_value()
                if app_id:
                    self.vault.add("microsoft_oauth", "client_id", app_id)
                    logger.info("✅ Client ID extracted")
            except:
                app_id = input("Paste Application (client) ID: ").strip()
                if app_id:
                    self.vault.add("microsoft_oauth", "client_id", app_id)
            
            logger.info("""
STEP 2: Create Client Secret
   - Click 'Certificates & secrets'
   - Click 'New client secret'
   - Description: 'Web app secret'
   - Expires: 24 months
   - Click 'Add'
   - COPY THE VALUE NOW (you won't see it again!)
""")
            
            client_secret = input("Paste Client Secret VALUE: ").strip()
            if client_secret:
                self.vault.add("microsoft_oauth", "client_secret", client_secret)
                logger.info("✅ Client Secret saved")
            
            logger.info("""
STEP 3: Configure API Permissions
   - Click 'API permissions'
   - Click 'Add a permission'
   - Select 'Microsoft Graph'
   - Select 'Delegated permissions'
   - Add: User.Read, email, openid, profile
   - Click 'Add permissions'
""")
            
            input("Press Enter when permissions are added...")
            
            logger.info("✅ Microsoft OAuth setup complete!")
            
        except Exception as e:
            logger.error(f"❌ Error: {e}", exc_info=True)
        finally:
            await page.close()
    
    async def get_android_debug_key(self):
        """Generate Android debug keystore SHA-1 for Google Sign In"""
        try:
            logger.info("🔑 Generating Android Debug Key SHA-1...")
            
            # Check if keytool is available
            result = subprocess.run(
                ['keytool', '-list', '-v', '-keystore', 
                 os.path.expanduser('~/.android/debug.keystore'),
                 '-alias', 'androiddebugkey', '-storepass', 'android', '-keypass', 'android'],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                # Extract SHA-1
                sha1_match = re.search(r'SHA1: ([A-F0-9:]+)', result.stdout)
                if sha1_match:
                    sha1 = sha1_match.group(1)
                    self.vault.add("android", "debug_sha1", sha1, 
                                 "Add this to Google Console Firebase settings")
                    logger.info(f"✅ SHA-1: {sha1}")
                else:
                    logger.warning("SHA-1 not found in keytool output")
            else:
                logger.warning("Debug keystore not found. Generate it first with Android Studio.")
                
        except FileNotFoundError:
            logger.error("keytool not found. Install Java JDK first.")
        except Exception as e:
            logger.error(f"Error getting debug key: {e}")
    
    async def setup_flowise(self, flowise_url: str = "http://localhost:3000"):
        """Extract Flowise API key and configuration"""
        page = await self.context.new_page()
        
        try:
            logger.info("🤖 Setting up Flowise...")
            
            await page.goto(flowise_url)
            await asyncio.sleep(2)
            
            logger.info(f"""
Flowise should be running at: {flowise_url}

STEP 1: Login to Flowise
STEP 2: Go to Settings → API Keys
STEP 3: Create new API key
""")
            
            input("Press Enter when you have the API key...")
            
            api_key = input("Paste Flowise API key: ").strip()
            if api_key:
                self.vault.add("flowise", "api_key", api_key)
                self.vault.add("flowise", "url", flowise_url)
                logger.info("✅ Flowise configured")
            
        except Exception as e:
            logger.error(f"Error: {e}")
        finally:
            await page.close()
    
    def generate_requirements_txt(self):
        """Generate complete requirements.txt"""
        requirements = """# DevOps Automation Agent Requirements
# Core automation
playwright==1.42.0
aiohttp==3.9.3
python-dotenv==1.0.1

# Meta WhatsApp API
requests==2.31.0
flask==3.0.2
werkzeug==3.0.1

# OAuth handling
authlib==1.3.0
requests-oauthlib==1.3.1

# Database (if needed)
psycopg2-binary==2.9.9
sqlalchemy==2.0.27

# Utilities
python-dateutil==2.8.2
pydantic==2.6.1

# Logging and monitoring
colorlog==6.8.2

# Deployment
gunicorn==21.2.0
"""
        
        with open("requirements.txt", "w") as f:
            f.write(requirements)
        
        logger.info("✅ Generated requirements.txt")
    
    async def deploy_to_render(self, service_id: str, api_key: str):
        """Update Render service with all environment variables"""
        import aiohttp
        
        try:
            logger.info("🚀 Deploying to Render...")
            
            env_vars = self.vault.get_render_format()
            
            async with aiohttp.ClientSession() as session:
                headers = {
                    "Authorization": f"Bearer {api_key}",
                    "Content-Type": "application/json"
                }
                
                url = f"https://api.render.com/v1/services/{service_id}/env-vars"
                
                async with session.put(url, headers=headers, json=env_vars) as resp:
                    if resp.status == 200:
                        logger.info("✅ Environment variables updated on Render!")
                        logger.info(f"   Updated {len(env_vars)} variables")
                    else:
                        text = await resp.text()
                        logger.error(f"❌ Failed: {resp.status} - {text}")
        
        except Exception as e:
            logger.error(f"Deployment error: {e}", exc_info=True)

# Main interactive CLI
async def main():
    print("""
╔══════════════════════════════════════════════════════════════╗
║  DevOps Automation Agent v2.0                                 ║
║  Your AI Cofounder for Service Setup                         ║
╚══════════════════════════════════════════════════════════════╝
""")
    
    agent = AutomationAgent(headless=False)
    
    try:
        await agent.start()
        
        while True:
            print("""
🤖 What would you like to do?

1.  Setup Meta WhatsApp Business API (Full Setup)
2.  Setup Google Sign-In (OAuth)
3.  Setup Microsoft/Outlook Sign-In (OAuth)
4.  Get Android Debug SHA-1 Key
5.  Setup Flowise API
6.  Generate requirements.txt
7.  Export credentials as .env file
8.  Deploy to Render
9.  View all saved credentials
10. Exit

💰 Playwright Cost: FREE (runs on your machine)
   - Uses ~100MB RAM
   - ~50MB disk space
   - No cloud costs!
""")
            
            choice = input("Enter choice (1-10): ").strip()
            
            if choice == "1":
                email = input("Facebook email: ").strip()
                password = input("Facebook password: ").strip()
                await agent.setup_meta_whatsapp(email, password)
                
            elif choice == "2":
                project = input("Google Cloud project name: ").strip()
                await agent.setup_google_oauth(project)
                
            elif choice == "3":
                await agent.setup_microsoft_oauth()
                
            elif choice == "4":
                await agent.get_android_debug_key()
                
            elif choice == "5":
                url = input("Flowise URL [http://localhost:3000]: ").strip() or "http://localhost:3000"
                await agent.setup_flowise(url)
                
            elif choice == "6":
                agent.generate_requirements_txt()
                
            elif choice == "7":
                env_content = agent.vault.get_env_format()
                print("\n" + "="*60)
                print(env_content)
                print("="*60 + "\n")
                
                with open(".env", "w") as f:
                    f.write(env_content)
                logger.info("✅ Saved to .env file")
                
            elif choice == "8":
                service_id = input("Render service ID: ").strip()
                api_key = input("Render API key: ").strip()
                await agent.deploy_to_render(service_id, api_key)
                
            elif choice == "9":
                print("\n📋 Saved Credentials:")
                for cred in agent.vault.credentials:
                    print(f"   {cred.service}.{cred.key_name}: {cred.value[:20]}...")
                print()
                
            elif choice == "10":
                break
            
            input("\nPress Enter to continue...")
        
    except KeyboardInterrupt:
        logger.info("\n⚠️  Interrupted by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}", exc_info=True)
    finally:
        await agent.stop()

if __name__ == "__main__":
    asyncio.run(main())