"""
Vector Database Setup Automation
Automates Weaviate and Pinecone setup with API key extraction
"""

import asyncio
import json
import logging
import os
from playwright.async_api import async_playwright
from typing import Dict, Optional
from datetime import datetime

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class VectorDBSetup:
    """Automates Weaviate and Pinecone setup"""
    
    def __init__(self, headless: bool = False):
        self.headless = headless
        self.browser = None
        self.context = None
        self.playwright = None
        self.credentials = {}
    
    async def start(self):
        """Initialize browser"""
        self.playwright = await async_playwright().start()
        self.browser = await self.playwright.chromium.launch(headless=self.headless)
        self.context = await self.browser.new_context(
            viewport={'width': 1920, 'height': 1080}
        )
        logger.info("üöÄ Browser started")
    
    async def stop(self):
        """Cleanup"""
        if self.browser:
            await self.browser.close()
        if self.playwright:
            await self.playwright.stop()
    
    async def setup_weaviate(self):
        """Setup Weaviate Cloud with step-by-step guidance"""
        page = await self.context.new_page()
        
        try:
            logger.info("üî∑ Setting up Weaviate Cloud...")
            
            await page.goto("https://console.weaviate.cloud/")
            await asyncio.sleep(3)
            
            print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  WEAVIATE CLOUD SETUP                                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã STEP 1: Sign Up / Login
   - If new: Click "Sign Up" ‚Üí Use Google/GitHub or email
   - If existing: Click "Login"
   
   ‚è∏Ô∏è  Complete this step, then press Enter...
""")
            input("Press Enter when logged in...")
            
            await asyncio.sleep(3)
            
            print("""
üìã STEP 2: Create Sandbox Cluster (FREE)
   - Click "Create cluster" or "New cluster"
   - Select "Sandbox" (14-day free trial)
   - Choose a name (e.g., "clarity-pearl-db")
   - Select region closest to you
   - Click "Create"
   
   ‚è≥ Cluster creation takes 1-3 minutes...
   ‚è∏Ô∏è  Wait for green checkmark ‚úîÔ∏è, then press Enter...
""")
            input("Press Enter when cluster is ready...")
            
            await asyncio.sleep(2)
            
            print("""
üìã STEP 3: Get Connection Details
   - Click on your cluster name
   - You'll see "Cluster details" page
   - Find "REST Endpoint URL" ‚Üí Copy it
   - Find "gRPC Endpoint URL" (optional)
""")
            
            # Try to extract REST endpoint
            try:
                endpoint = await page.locator('input[value*="weaviate.cloud"]').first.input_value()
                if endpoint:
                    self.credentials['weaviate_endpoint'] = endpoint
                    logger.info(f"‚úÖ Endpoint: {endpoint}")
            except:
                pass
            
            if not self.credentials.get('weaviate_endpoint'):
                endpoint = input("üìù Paste REST Endpoint URL here: ").strip()
                if endpoint:
                    self.credentials['weaviate_endpoint'] = endpoint
            
            print("""
üìã STEP 4: Create API Key (For new clusters with RBAC)
   - Scroll down to "API Keys" section
   - Click "New key" button
   - Name: "clarity-pearl-api-key"
   - Role: Select "admin" (read-write access)
   - Click "Create key"
   
   ‚ö†Ô∏è  IMPORTANT: Copy the API key NOW! 
   You won't see it again!
""")
            
            # Try to extract API key
            try:
                api_key_elem = await page.locator('input[type="text"]').all()
                for elem in api_key_elem:
                    value = await elem.input_value()
                    if len(value) > 30 and '-' not in value[:10]:
                        self.credentials['weaviate_api_key'] = value
                        logger.info("‚úÖ API key extracted automatically!")
                        break
            except:
                pass
            
            if not self.credentials.get('weaviate_api_key'):
                api_key = input("üìù Paste API Key here: ").strip()
                if api_key:
                    self.credentials['weaviate_api_key'] = api_key
            
            logger.info("‚úÖ Weaviate setup complete!")
            logger.info(f"   Endpoint: {self.credentials.get('weaviate_endpoint', 'N/A')[:50]}...")
            logger.info(f"   API Key: {self.credentials.get('weaviate_api_key', 'N/A')[:20]}...")
            
        except Exception as e:
            logger.error(f"‚ùå Error: {e}")
        finally:
            await page.close()
    
    async def setup_pinecone(self):
        """Setup Pinecone with step-by-step guidance"""
        page = await self.context.new_page()
        
        try:
            logger.info("üìå Setting up Pinecone...")
            
            await page.goto("https://app.pinecone.io/")
            await asyncio.sleep(3)
            
            print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  PINECONE SETUP                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã STEP 1: Sign Up / Login
   - If new: Click "Sign up free" ‚Üí Use Google/GitHub or email
   - If existing: Click "Log in"
   
   üí∞ FREE TIER: Starter plan with generous limits
      - 1 index
      - 100K vectors
      - Pod-based (free forever)
   
   ‚è∏Ô∏è  Complete this step, then press Enter...
""")
            input("Press Enter when logged in...")
            
            await asyncio.sleep(3)
            
            print("""
üìã STEP 2: Get Your API Key
   - You should see the Dashboard
   - Look for "API Keys" in the left sidebar
   - Or go to: https://app.pinecone.io/organizations/-/projects/-/keys
   - Click "Create API Key" (if needed)
   - Name it: "clarity-pearl-key"
   - Copy the API key
   
   ‚ö†Ô∏è  IMPORTANT: Save the API key immediately!
""")
            
            # Navigate to API keys page
            try:
                await page.goto("https://app.pinecone.io/organizations/-/projects/-/keys")
                await asyncio.sleep(3)
            except:
                pass
            
            # Try to extract API key
            try:
                key_elements = await page.locator('code, pre, input[type="text"]').all()
                for elem in key_elements:
                    value = await elem.text_content() if hasattr(elem, 'text_content') else await elem.input_value()
                    if value and len(value) > 30 and value.startswith(('pc-', 'pcsk-')):
                        self.credentials['pinecone_api_key'] = value
                        logger.info("‚úÖ API key extracted automatically!")
                        break
            except:
                pass
            
            if not self.credentials.get('pinecone_api_key'):
                api_key = input("üìù Paste Pinecone API Key here: ").strip()
                if api_key:
                    self.credentials['pinecone_api_key'] = api_key
            
            print("""
üìã STEP 3: Note Your Environment
   - In the API Keys page, you'll see "Environment"
   - Common environments: 
     * us-east-1-aws (most common)
     * us-west1-gcp
     * eu-west1-gcp
   - This is auto-detected by the SDK usually
""")
            
            environment = input("üìù Pinecone Environment (or press Enter for default): ").strip()
            if environment:
                self.credentials['pinecone_environment'] = environment
            
            logger.info("‚úÖ Pinecone setup complete!")
            logger.info(f"   API Key: {self.credentials.get('pinecone_api_key', 'N/A')[:20]}...")
            
        except Exception as e:
            logger.error(f"‚ùå Error: {e}")
        finally:
            await page.close()
    
    def save_credentials(self, filename: str = ".env"):
        """Save credentials to .env file"""
        try:
            # Read existing .env if it exists
            existing_vars = {}
            if os.path.exists(filename):
                with open(filename, 'r') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            existing_vars[key] = value
            
            # Add new credentials
            if self.credentials.get('weaviate_endpoint'):
                existing_vars['WEAVIATE_ENDPOINT'] = self.credentials['weaviate_endpoint']
            if self.credentials.get('weaviate_api_key'):
                existing_vars['WEAVIATE_API_KEY'] = self.credentials['weaviate_api_key']
            if self.credentials.get('pinecone_api_key'):
                existing_vars['PINECONE_API_KEY'] = self.credentials['pinecone_api_key']
            if self.credentials.get('pinecone_environment'):
                existing_vars['PINECONE_ENVIRONMENT'] = self.credentials['pinecone_environment']
            
            # Write back to .env
            with open(filename, 'w') as f:
                f.write("# Environment Variables\n")
                f.write(f"# Updated: {datetime.now().isoformat()}\n\n")
                
                for key, value in sorted(existing_vars.items()):
                    f.write(f"{key}={value}\n")
            
            logger.info(f"‚úÖ Credentials saved to {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå Error saving credentials: {e}")
    
    def generate_test_script(self):
        """Generate test script for vector databases"""
        test_code = '''"""
Test Vector Database Connections
"""

import os
from dotenv import load_dotenv

load_dotenv()

def test_weaviate():
    """Test Weaviate connection"""
    print("üî∑ Testing Weaviate...")
    
    try:
        import weaviate
        from weaviate.classes.init import Auth
        
        client = weaviate.connect_to_weaviate_cloud(
            cluster_url=os.getenv("WEAVIATE_ENDPOINT"),
            auth_credentials=Auth.api_key(os.getenv("WEAVIATE_API_KEY"))
        )
        
        if client.is_ready():
            print("‚úÖ Weaviate: Connected successfully!")
            print(f"   Cluster: {os.getenv('WEAVIATE_ENDPOINT')}")
        else:
            print("‚ùå Weaviate: Connection failed")
        
        client.close()
        
    except Exception as e:
        print(f"‚ùå Weaviate error: {e}")

def test_pinecone():
    """Test Pinecone connection"""
    print("\\nüìå Testing Pinecone...")
    
    try:
        from pinecone import Pinecone
        
        pc = Pinecone(api_key=os.getenv("PINECONE_API_KEY"))
        
        # List indexes
        indexes = pc.list_indexes()
        print(f"‚úÖ Pinecone: Connected successfully!")
        print(f"   Indexes: {len(indexes)}")
        
        for index in indexes:
            print(f"   - {index['name']}")
        
    except Exception as e:
        print(f"‚ùå Pinecone error: {e}")

if __name__ == "__main__":
    print("\\nüß™ Testing Vector Database Connections...\\n")
    test_weaviate()
    test_pinecone()
    print("\\n‚úÖ Testing complete!")
'''
        
        with open("test_vector_dbs.py", "w") as f:
            f.write(test_code)
        
        logger.info("‚úÖ Generated test_vector_dbs.py")

# Main execution
async def main():
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  Vector Database Setup Automation                             ‚ïë
‚ïë  Weaviate + Pinecone                                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

This script will help you:
1. ‚úÖ Set up Weaviate Cloud (FREE Sandbox)
2. ‚úÖ Set up Pinecone (FREE Starter tier)
3. ‚úÖ Extract and save API keys
4. ‚úÖ Generate test script

üí∞ COSTS: $0 - Both have generous free tiers!

Ready to start? (y/n): """)
    
    if input().lower() != 'y':
        return
    
    setup = VectorDBSetup(headless=False)
    
    try:
        await setup.start()
        
        print("\nüî∑ Starting Weaviate setup...")
        await setup.setup_weaviate()
        
        print("\n" + "="*70)
        input("\nPress Enter to continue to Pinecone setup...")
        
        print("\nüìå Starting Pinecone setup...")
        await setup.setup_pinecone()
        
        print("\n" + "="*70)
        print("\nüíæ Saving credentials...")
        setup.save_credentials()
        
        print("\nüìù Generating test script...")
        setup.generate_test_script()
        
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  ‚úÖ SETUP COMPLETE!                                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìÑ Credentials saved to: .env

üß™ Test your connections:
   pip install weaviate-client pinecone-client
   python test_vector_dbs.py

üìã Next steps:
   1. Install required packages:
      pip install weaviate-client pinecone-client
   
   2. Test connections:
      python test_vector_dbs.py
   
   3. Update your clarity-pearl project to use these credentials

üí° Tips:
   - Weaviate Sandbox expires after 14 days (upgrade to Serverless for production)
   - Pinecone Starter is free forever with 1 index and 100K vectors
   - Keep your API keys secure and never commit them to Git!
""")
        
    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
    finally:
        await setup.stop()

if __name__ == "__main__":
    asyncio.run(main())